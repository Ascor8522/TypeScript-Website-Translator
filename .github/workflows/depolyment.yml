name: Deployment
on:
  push:
    branches-ignore:
      - gh-pages
  create:
  delete:

jobs:
  vite-build:
    runs-on: ubuntu-latest
    steps:
      - name: Setting up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cloning the repo & checking out the latest commit
        uses: actions/checkout@v3

      - name: Installing dependencies
        run: npm ci

      - name: Building the site
        run: npm run build

  gh-pages-build:
    needs: vite-build
    runs-on: ubuntu-latest
    env:
      DIST_DIR: dist
      GH_PAGES_BRANCH: gh-pages
    steps:
      - name: Setting up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cloning the repo
        uses: actions/checkout@v3

      - name: Listing forbidden branch names
        run: |
          # List all the forbidden branch names, that might cause conflicts
          FORBIDDEN_BRANCH_NAMES="(${{env.GH_PAGES_BRANCH}}|${{env.DIST_DIR}}|HEAD|.git)"
          echo "Forbidden branch names: $FORBIDDEN_BRANCH_NAMES"
          echo "FORBIDDEN_BRANCH_NAMES=$FORBIDDEN_BRANCH_NAMES" >> "$GITHUB_ENV"
        shell: bash

      - name: Getting repo name
        run: |
          # Get the name of the repo, to use it later
          REPO_NAME=$(echo ${{ github.repository }} | sed 's/.*\///')
          echo "Repo name: $REPO_NAME"
          echo "REPO_NAME=$REPO_NAME" >> "$GITHUB_ENV"
        shell: bash

      - name: Listing current branches
        run: |
          # List all the branches in the repo (that have a valid name)
          CURRENT_BRANCHES=$(git branch -r | sed 's/\s*origin\///' | grep -Ev "${{env.FORBIDDEN_BRANCH_NAMES}}")
          echo "Current branches: $CURRENT_BRANCHES"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "CURRENT_BRANCHES<<$EOF" >> "$GITHUB_ENV"
          echo "$CURRENT_BRANCHES" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"
        shell: bash

      - name: Building the site
        run: |
          for BRANCH in ${{env.CURRENT_BRANCHES}}; do
            echo "::group::Building branch $BRANCH"
            git checkout $BRANCH
            npm ci
            npm run build -- --outDir "${{env.DIST_DIR}}/$BRANCH" --base "/${{env.REPO_NAME}}/$BRANCH" --force
            echo "::endgroup::"
          done
        shell: bash

      - name: Switching to gh-pages
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GH_PAGES_BRANCH }}
          clean: false

      - name: Listing old branches builds
        run: |
          # List all the tracked directories in the root of the repo, those are old builds
          OLD_BRANCHES=$(git ls-files | xargs dirname | grep -v '^.$' | cut -d'/' -f 1 | uniq)
          echo "Old branches: $OLD_BRANCHES"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "OLD_BRANCHES<<$EOF" >> "$GITHUB_ENV"
          echo "$OLD_BRANCHES" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"
        shell: bash

      - name: Listing branches to delete
        run: |
          # List all the branches that got deleted since the last build
          echo "GH current branches:"
          echo "${{env.CURRENT_BRANCHES}}"
          CURRENT_BRANCHES="$(echo "${{env.CURRENT_BRANCHES}}" | tr '\n' '|' | sed 's/|$//')"
          echo "Current branches: $CURRENT_BRANCHES"
          BRANCHES_TO_DELETE=$(echo "${{env.OLD_BRANCHES}}" | grep -Ev "$CURRENT_BRANCHES")
          echo "Branches to delete: $BRANCHES_TO_DELETE"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "BRANCHES_TO_DELETE<<$EOF" >> "$GITHUB_ENV"
          echo "$BRANCHES_TO_DELETE" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"
        shell: bash

      - name: Deleting old branches builds
        run: |
          echo "::group::Deleting branches"
          for BRANCH in ${{env.BRANCHES_TO_DELETE}}; do
            rm -rf $BRANCH
            echo "Deleted old branch $BRANCH"
          done
          echo "::endgroup::"
        shell: bash

      - name: Listing built branches
        run: |
          # List all the branches that got built
          BUILT_BRANCHES=$(find "${{env.DIST_DIR}}" -mindepth 1 -maxdepth 1 -type d | sed 's/dist\///' | grep -Ev "${{env.FORBIDDEN_BRANCH_NAMES}}")
          echo "Built branches: $BUILT_BRANCHES"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "BUILT_BRANCHES<<$EOF" >> "$GITHUB_ENV"
          echo "$BUILT_BRANCHES" >> "$GITHUB_ENV"
          echo "$EOF" >> "$GITHUB_ENV"
        shell: bash

      - name: Copying updated branches builds
        run: |
          echo "::group::Updating branches"
          for BRANCH in ${{env.BUILT_BRANCHES}}; do
            rm -rf $BRANCH
            mv -f dist/$BRANCH $BRANCH
            echo "Updated branch $BRANCH"
          done
          echo "::endgroup::"
          rm -rf dist
        shell: bash

      - name: Committing the changes
        uses: EndBug/add-and-commit@v9
        with:
          add: .
          default_author: github_actions
          message: "Deploy ${{ github.push.after }} to GitHub Pages"
          push: true
